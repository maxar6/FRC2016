/*
 * AutoRamparts.cpp
 *
 *  Created on: Mar 3, 2016
 *      Author: maxar
 */
#include "AutoRamparts.h"
#include "Commands/AutoDriveCommand.h"
#include "Commands/CommandGroup.h"
#include "Commands/TurnToGyroCommand.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoRamparts::AutoRamparts(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	pos = RobotMap::launcherdart->GetAnalogIn();
	done = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoRamparts::Initialize() {
	pos = RobotMap::launcherdart->GetAnalogIn();
	SetInterruptible(false);
}

// Called repeatedly when this Command is scheduled to run

void AutoRamparts::Execute() {

	pos = RobotMap::launcherdart->GetAnalogIn();
	if (pos > 320)
	{
		while (pos < 850)
		{
			pos = RobotMap::launcherdart->GetAnalogIn();
			Robot::launcher->setDart(-0.75);
		}
	}
	Robot::launcher->setDart(0);
	Robot::ramp->setMotor(-0.5);
	Wait(.3);
	Robot::ramp->setMotor(0);
	Command* Drive = new AutoDriveCommand(-0.6, 4, 0);
	if (Drive != NULL) Drive->Start();
	Drive = new AutoDriveCommand(0, 0, 0);
	if (Drive != NULL) Drive->Start();
	Drive = new TurnToGyroCommand(180, 2, 2);
	if (Drive != NULL) Drive->Start();
	Drive = new AutoDriveCommand(0,0,0);
	if (Drive != NULL) Drive->Start();
	done = 1;

}

// Make this return true when this Command no longer needs to run execute()
bool AutoRamparts::IsFinished() {
	return (done == 1);
}

// Called once after isFinished returns true
void AutoRamparts::End() {
	Command* Drive = new AutoDriveCommand(0, 0, 0);
	if (Drive != NULL) Drive->Start();

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoRamparts::Interrupted() {
	Command* Drive = new AutoDriveCommand(0, 0, 0);
	if (Drive != NULL) Drive->Start();
}




